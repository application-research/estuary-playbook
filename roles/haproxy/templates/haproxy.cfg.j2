global
    log /dev/log	local0
    log /dev/log	local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    log	global
    mode	http
    option	httplog
    option	dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

listen stats
    mode http
    bind *:8080
    stats enable
    stats uri /

frontend http
    bind *:80

    # HTTPS redirect
    redirect scheme https code 301 if !{ ssl_fc }

    mode http
    option tcplog
    acl api hdr(Host) -i api.haapi.tech
    acl api hdr(Host) -i api.estuary.tech
    acl web hdr(Host) -i haapi.tech
    acl web hdr(Host) -i estuary.tech
    acl letsencrypt path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if letsencrypt
    use_backend api if api
{% if groups["estuary_www"] is defined and groups["estuary_www"] %}
    use_backend web if web
{% endif %}
    default_backend blackhole

{% if groups["estuary_www"] is defined and groups["estuary_www"] %}
frontend https
    bind *:443 ssl crt /etc/ssl/api.haapi.tech/api.haapi.tech.pem

    mode http
    option tcplog
    acl api hdr(Host) -i api.haapi.tech
    acl api hdr(Host) -i api.estuary.tech
    acl web hdr(Host) -i haapi.tech
    acl web hdr(Host) -i estuary.tech
    acl letsencrypt path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if letsencrypt
    use_backend api if api
    use_backend web if web
    default_backend blackhole
{% endif %}

frontend database
    bind *:5432
    mode tcp
    default_backend postgres

frontend database_read
    bind *:5433
    mode tcp
    default_backend postgres_read

# Send all traffic not specifically destined for a destination to an invalid port.
backend blackhole
    server blackhole 127.0.0.1:443 verify none

# Let's Encrypt challenges
backend letsencrypt
    server letsencrypt 127.0.0.1:8888

backend api
    option httpchk
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
{% for node in groups.estuary_main %}
    server api{{ loop.index }} {{ hostvars[node].ansible_host }}:3004 check
{% endfor %}

{% if groups["estuary_www"] is defined and groups["estuary_www"] %}
backend web
    option httpchk
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    {% for node in groups.estuary_www %}
    server web{{ loop.index }} {{ hostvars[node].ansible_host }}:4444 check
    {% endfor %}
{% endif %}

backend postgres
    balance leastconn
    mode tcp
    option httpchk
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
{% for node in groups.postgresql %}
    server postgres{{ loop.index }} {{ hostvars[node]["ansible_bond0_0"]["ipv4"]["address"]}}:5432 maxconn {{ postgres_connections }} check port 8008
{% endfor %}

backend postgres_read
    mode tcp
    balance leastconn
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
{% for node in groups.postgresql %}
    server postgres{{ loop.index }} {{ hostvars[node]["ansible_bond0_0"]["ipv4"]["address"]}}:5432 maxconn {{ postgres_read_connections }} check
{% endfor %}

