---
# Node.JS version to use for Estuary Web
nodejs_version: "14.x"

# Go version to use for Estuary
golang_version: '1.18.7'

### Estuary settings ###
# Main service endpoint + API location.
# This should usually be a name your main Estuary service node is reachable at, complete with port.
estuary_hostname: "api.haapi.tech"
estuary_api: "0.0.0.0:3004"

# Estuary version to deploy
# This should be a valid tag on the estuary repository
estuary_version: "v0.2.1"

# FIL full node location. Leave this as default unless you're running your own.
fullnode_api: "https://api.node.glif.io/" # alt: ws://api.chain.love"

# For the main service, where to store database data and other data.
# For shuttles, where to store database data.
#estuary_data: "/usr/src/estuary/data"
estuary_data: "/api/estuary/data"

# For the shuttles, where to store non-database data
estuary_shuttle_data: "/shuttle/estuary/data"

# User to run Estuary as, applies to shuttles and www only.
estuary_system_user: "estuary"

### Database settings ###
# Enable *one* of the following database_config stanzas to set up database access.
# SQLite is simplest but less scalable, perfect for evaluating Estuary prior to production setup.

# SQLite mode settings (default)
#database_config: 'sqlite={{estuary_data}}/estuary.db'
database_config_shuttle: 'sqlite={{estuary_shuttle_data}}/estuary.db'

# SQLite mode with a custom storage location for the SQLite database
#database_config: 'sqlite=/data/sqlite/estuary.db'
#database_config_shuttle: 'sqlite=/data/sqlite/estuary.db'

# PostgreSQL mode settings
database_config: 'postgres=host={{ estuary_database_host }} user={{ estuary_database_user }} password={{ estuary_database_password }} dbname={{ estuary_database_name }}'
#database_config_shuttle: 'postgres=host=127.0.0.1 user=estuary_shuttle password={{ estuary_shuttle_database_password }} dbname=estuary_shuttle'

# Trigger postgres installation by setting this to true if needed.
install_postgresql: false
